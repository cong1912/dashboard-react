{"version":3,"file":"static/js/190.db88a5f8.chunk.js","mappings":"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","sources":["components/EditQuestionForm/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport {\r\n  TextField,\r\n  Theme,\r\n  Button,\r\n  FormLabel,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid\r\n} from '@material-ui/core';\r\nimport { QUESTION_URL } from 'src/constants/url';\r\nimport { getData } from 'src/helpers/apiHandle';\r\nimport useSWR, { mutate } from 'swr';\r\nimport { updateQuestion } from 'src/services/QuestionService';\r\n\r\n//context\r\nimport { ERROR_ACTION } from 'src/reduces/ErrorsReducer';\r\nimport { AppContext } from 'src/AppProvider';\r\nimport { AppContextType } from 'src/interfaces/AppContextType';\r\nimport { SUCCESS_ACTION } from 'src/reduces/SuccessReducer';\r\nimport { IQuestion } from 'src/content/applications/Questions';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    '& .MuiFormControl-root': {\r\n      width: '100%'\r\n    }\r\n  }\r\n}));\r\n\r\nconst CreateQuestionForm = ({ open, setIsOpenUpdateModal, id, newsId }) => {\r\n  const classes = useStyles();\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [requesting, setRequesting] = useState(false);\r\n  const [image, setImage] = useState([]);\r\n  const [imageUrl, setImageUrl] = useState('');\r\n\r\n  // context\r\n  const appContext = useContext(AppContext) as AppContextType;\r\n  const { errorsReducer, successReducer } = appContext;\r\n  const [errors, errorDispatch] = errorsReducer;\r\n  const [success, successDispatch] = successReducer;\r\n\r\n  // fetch data\r\n  const { data: questions } = useSWR<IQuestion>(\r\n    id ? QUESTION_URL + id : null,\r\n    getData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!id || !questions) {\r\n      return;\r\n    } else {\r\n      const newImage =\r\n        questions.imgUrl == null\r\n          ? null\r\n          : process.env.REACT_APP_API_BACK_END +\r\n            questions.imgUrl.replace('public/', '');\r\n      setTitle(questions.title);\r\n      setContent(questions.content);\r\n      setImageUrl(newImage);\r\n    }\r\n  }, [questions, id]);\r\n\r\n  const handleClose = () => {\r\n    setIsOpenUpdateModal(false);\r\n  };\r\n  const handleEditQuestion = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('content', content);\r\n      formData.append('title', title);\r\n      formData.append('newsId', +newsId as unknown as string);\r\n\r\n      if (image[0]) {\r\n        formData.append('file', image[0]);\r\n      }\r\n\r\n      await updateQuestion(formData, id);\r\n      successDispatch({\r\n        type: SUCCESS_ACTION.SET_SUCCESS,\r\n        success: 'Edit Question Success'\r\n      });\r\n      await mutate(QUESTION_URL + `?newsId=${newsId}`);\r\n      setIsOpenUpdateModal(false);\r\n    } catch (error) {\r\n      errorDispatch({\r\n        type: ERROR_ACTION.SET_ERROR,\r\n        error: error.response.data.message\r\n      });\r\n      setRequesting(false);\r\n    }\r\n  };\r\n  const handleChange = (files) => {\r\n    setImage(files);\r\n  };\r\n\r\n  if (!questions) return <CircularProgress />;\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth=\"sm\">\r\n      <DialogTitle>Chỉnh sửa câu hỏi</DialogTitle>\r\n      <form className={classes.root} onSubmit={handleEditQuestion}>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                onChange={(e) => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n                value={title}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Content\"\r\n                multiline\r\n                rows={5}\r\n                name=\"content\"\r\n                value={content}\r\n                onChange={(e) => setContent(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormLabel>Thumb</FormLabel>\r\n              <DropzoneArea\r\n                initialFiles={[imageUrl]}\r\n                onChange={handleChange}\r\n                acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\r\n                maxFileSize={5000000}\r\n                filesLimit={1}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            disabled={requesting}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateQuestionForm;\r\n"],"names":["useStyles","makeStyles","theme","root","width","open","setIsOpenUpdateModal","id","newsId","classes","useState","title","setTitle","content","setContent","requesting","setRequesting","image","setImage","imageUrl","setImageUrl","appContext","useContext","AppContext","errorsReducer","successReducer","errorDispatch","successDispatch","questions","useSWR","QUESTION_URL","getData","data","useEffect","newImage","imgUrl","process","replace","handleClose","handleEditQuestion","event","preventDefault","formData","FormData","append","updateQuestion","type","SUCCESS_ACTION","success","mutate","ERROR_ACTION","error","response","message","onClose","maxWidth","className","onSubmit","container","spacing","item","xs","variant","label","name","onChange","e","target","value","multiline","rows","initialFiles","files","acceptedFiles","maxFileSize","filesLimit","color","size","disabled","onClick"],"sourceRoot":""}