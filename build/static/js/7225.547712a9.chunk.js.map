{"version":3,"file":"static/js/7225.547712a9.chunk.js","mappings":"+aAwBMA,GAAYC,EAAAA,EAAAA,IAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJ,yBAA0B,CACxBC,MAAO,MACPC,OAAQH,EAAMI,QAAQ,IAExB,2BAA4B,CAC1BC,OAAQ,KAEV,iBAAkB,CAChBH,MAAO,MACPC,OAAQH,EAAMI,QAAQ,IAExB,WAAY,CACVC,OAAQ,MAGZC,IAAK,CACHH,OAAQH,EAAMI,QAAQ,KAExBG,MAAO,CACLC,cAAe,OACfL,OAAQH,EAAMI,QAAQ,SA4G1B,UAxG2B,SAAC,GAAoD,IAAlDK,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,qBAAsBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,WACtDC,EAAUf,IAChB,GAAoCgB,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAGMC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GACtBC,EAAkCH,EAAlCG,cAAeC,EAAmBJ,EAAnBI,eACvB,UAAgCD,EAAhC,GAAeE,GAAf,WACA,UAAmCD,EAAnC,GAAgBE,GAAhB,WAGcC,GAAWC,EAAAA,EAAAA,IACvBlB,EAAKmB,EAAAA,GAAkBnB,EAAK,KAC5BoB,EAAAA,GAFMC,MAKRC,EAAAA,EAAAA,YAAU,WACHtB,GAAOiB,IAGVR,EAAWQ,EAAOT,SAClBD,EAAWU,EAAOX,YAEnB,CAACW,EAAQjB,IAEZ,IAAMuB,EAAgB,yCAAG,WAAOC,GAAP,mFACvBA,EAAMC,iBADiB,SAGfJ,EAAO,CACXb,QAASA,EACTF,QAASA,EACTL,YAAaA,GANM,UASfyB,EAAAA,EAAAA,GAAaL,EAAMrB,GATJ,cAUrBgB,EAAgB,CACdW,KAAMC,EAAAA,GAAAA,YACNC,QAAS,wBAZU,UAcfC,EAAAA,EAAAA,IAAOX,EAAAA,GAAe,sBAAkBlB,IAdzB,OAerBF,GAAqB,GAfA,kDAiBrBgB,EAAc,CACZY,KAAMI,EAAAA,GAAAA,UACNC,MAAO,KAAMC,SAASZ,KAAKa,UAE7B7B,GAAc,GArBO,0DAAH,sDAyBhB8B,EAAc,WAClBpC,GAAqB,IAGvB,OAAKkB,GAEH,UAAC,IAAD,CAAQnB,KAAMA,EAAMsC,QAASD,EAAaE,SAAS,KAAnD,WACE,SAAC,IAAD,qDACA,kBAAMC,UAAWpC,EAAQZ,KAAMiD,SAAUhB,EAAzC,WACE,SAAC,IAAD,WACE,UAAC,KAAD,CAAMiB,WAAS,EAAC/C,QAAS,EAAzB,WACE,SAAC,KAAD,CAAMgD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEC,QAAQ,WACR/C,MAAM,UACNgD,WAAS,EACTC,KAAK,UACLC,SAAU,SAACC,GACTtC,EAAWsC,EAAEC,OAAOC,QAEtBA,MAAOzC,OAGX,SAAC,KAAD,CAAMiC,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEQ,SAAS,SAAC,IAAD,CAAUC,QAAS7C,IAC5BwC,SAAU,SAACC,GACTxC,GAAYD,IAEd8C,eAAe,QACfxD,MAAM,wCAKd,UAAC,IAAD,YACE,SAAC,IAAD,CACEyD,MAAM,UACNC,KAAK,QACL3B,KAAK,SACLW,UAAWpC,EAAQN,MACnB2D,SAAUnD,EALZ,qBASA,SAAC,IAAD,CAAQoD,QAASrB,EAAjB,8BAzCY,SAAC,IAAD","sources":["components/EditQuizAnswerForm/index.tsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Theme, Button } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle\r\n} from '@material-ui/core';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport { updateAnswer } from 'src/services/AnswerService';\r\nimport { Grid, Container, CircularProgress } from '@mui/material';\r\n//context\r\nimport { ERROR_ACTION } from 'src/reduces/ErrorsReducer';\r\nimport { AppContext } from 'src/AppProvider';\r\nimport { AppContextType } from 'src/interfaces/AppContextType';\r\nimport { SUCCESS_ACTION } from 'src/reduces/SuccessReducer';\r\nimport useSWR, { mutate } from 'swr';\r\nimport { QUIZ_ANSWER_URL } from 'src/constants/url';\r\nimport { getData } from 'src/helpers/apiHandle';\r\nimport { IAnswer } from 'src/content/applications/QuizAnswer';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    '& .MuiFormControl-root': {\r\n      width: '90%',\r\n      margin: theme.spacing(1)\r\n    },\r\n    '& .MuiDialogContent-root': {\r\n      height: 200\r\n    },\r\n    '& .MuiBox-root': {\r\n      width: '90%',\r\n      margin: theme.spacing(1)\r\n    },\r\n    '& .quill': {\r\n      height: 180\r\n    }\r\n  },\r\n  btn: {\r\n    margin: theme.spacing(0.5)\r\n  },\r\n  label: {\r\n    textTransform: 'none',\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nconst EditQuizAnswerForm = ({ open, setIsOpenUpdateModal, id, questionId }) => {\r\n  const classes = useStyles();\r\n  const [requesting, setRequesting] = useState(false);\r\n  const [correct, setCorrect] = useState(false);\r\n  const [content, setContent] = useState('');\r\n\r\n  // context\r\n  const appContext = useContext(AppContext) as AppContextType;\r\n  const { errorsReducer, successReducer } = appContext;\r\n  const [errors, errorDispatch] = errorsReducer;\r\n  const [success, successDispatch] = successReducer;\r\n\r\n  //fetch data\r\n  const { data: answer } = useSWR<IAnswer>(\r\n    id ? QUIZ_ANSWER_URL + id : null,\r\n    getData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!id || !answer) {\r\n      return;\r\n    } else {\r\n      setContent(answer.content);\r\n      setCorrect(answer.correct);\r\n    }\r\n  }, [answer, id]);\r\n\r\n  const handleEditAnswer = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    try {\r\n      const data = {\r\n        content: content,\r\n        correct: correct,\r\n        questionId: +questionId\r\n      };\r\n\r\n      await updateAnswer(data, id);\r\n      successDispatch({\r\n        type: SUCCESS_ACTION.SET_SUCCESS,\r\n        success: 'Edit Answer Success'\r\n      });\r\n      await mutate(QUIZ_ANSWER_URL + `?questionId=${questionId}`);\r\n      setIsOpenUpdateModal(false);\r\n    } catch (error) {\r\n      errorDispatch({\r\n        type: ERROR_ACTION.SET_ERROR,\r\n        error: error.response.data.message\r\n      });\r\n      setRequesting(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsOpenUpdateModal(false);\r\n  };\r\n\r\n  if (!answer) return <CircularProgress />;\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth=\"xs\">\r\n      <DialogTitle>Chỉnh sửa đáp án</DialogTitle>\r\n      <form className={classes.root} onSubmit={handleEditAnswer}>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"content\"\r\n                multiline\r\n                name=\"content\"\r\n                onChange={(e) => {\r\n                  setContent(e.target.value);\r\n                }}\r\n                value={content}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={correct} />}\r\n                onChange={(e) => {\r\n                  setCorrect(!correct);\r\n                }}\r\n                labelPlacement=\"start\"\r\n                label=\"This is the correct answer:\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            className={classes.label}\r\n            disabled={requesting}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditQuizAnswerForm;\r\n"],"names":["useStyles","makeStyles","theme","root","width","margin","spacing","height","btn","label","textTransform","open","setIsOpenUpdateModal","id","questionId","classes","useState","requesting","setRequesting","correct","setCorrect","content","setContent","appContext","useContext","AppContext","errorsReducer","successReducer","errorDispatch","successDispatch","answer","useSWR","QUIZ_ANSWER_URL","getData","data","useEffect","handleEditAnswer","event","preventDefault","updateAnswer","type","SUCCESS_ACTION","success","mutate","ERROR_ACTION","error","response","message","handleClose","onClose","maxWidth","className","onSubmit","container","item","xs","variant","multiline","name","onChange","e","target","value","control","checked","labelPlacement","color","size","disabled","onClick"],"sourceRoot":""}