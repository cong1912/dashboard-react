{"version":3,"file":"static/js/8850.7dfb3ea3.chunk.js","mappings":"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","sources":["components/EditCourseForm/index.tsx","components/QuillInput/index.tsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Theme,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Box } from '@mui/system';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle\r\n} from '@material-ui/core';\r\nimport QuillInput from '../QuillInput';\r\n\r\nimport { SUCCESS_ACTION } from 'src/reduces/SuccessReducer';\r\nimport { ERROR_ACTION } from 'src/reduces/ErrorsReducer';\r\nimport { AppContext } from 'src/AppProvider';\r\nimport { AppContextType } from 'src/interfaces/AppContextType';\r\nimport { ICategory } from '../EditBlogForm';\r\nimport { getData } from 'src/helpers/apiHandle';\r\nimport { ARTICLE_CATEGORY, COURSE_URL } from 'src/constants/url';\r\nimport useSWR, { mutate } from 'swr';\r\nimport { ICategories, ICourse } from 'src/content/applications/Courses';\r\nimport { updateCourse } from 'src/services/CourseService';\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    '& .MuiFormControl-root': {\r\n      width: '90%',\r\n      margin: theme.spacing(1)\r\n    },\r\n    '& .MuiDialogContent-root': {\r\n      height: 400\r\n    },\r\n    '& .MuiBox-root': {\r\n      width: '90%',\r\n      margin: theme.spacing(1)\r\n    },\r\n    '& .quill': {\r\n      height: 180\r\n    }\r\n  },\r\n  btn: {\r\n    margin: theme.spacing(0.5)\r\n  },\r\n  label: {\r\n    textTransform: 'none',\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nconst EditCourseForm = ({ open, id, setIsOpenUpdateModal }) => {\r\n  const classes = useStyles();\r\n  const [requesting, setRequesting] = useState<boolean>(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [categoriesUpdate, setCategoriesUpdate] = useState<ICategory>();\r\n  const [image, setImage] = useState([]);\r\n  const [description, setDescription] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [indexCategory, setIndexCategory] = useState<number>();\r\n\r\n  const appContext = useContext(AppContext) as AppContextType;\r\n  const { errorsReducer, successReducer } = appContext;\r\n  const [errors, errorDispatch] = errorsReducer;\r\n  const [success, successDispatch] = successReducer;\r\n\r\n  const { data: course } = useSWR<ICourse>(\r\n    id ? COURSE_URL + id : null,\r\n    getData\r\n  );\r\n  const { data: articleCategory } = useSWR<ICategories>(\r\n    ARTICLE_CATEGORY,\r\n    getData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!id || !course) {\r\n      return;\r\n    } else {\r\n      setTitle(course.title);\r\n      setDescription(course.description);\r\n      if (!course) {\r\n        return;\r\n      } else {\r\n        setImageUrl(\r\n          `${\r\n            process.env.REACT_APP_API_BACK_END +\r\n            course.image.slice(7, course.image.length)\r\n          }`\r\n        );\r\n        setCategories(articleCategory.results);\r\n        setCategoriesUpdate(\r\n          articleCategory.results[\r\n            articleCategory.results.findIndex(\r\n              (element) => element.id == course.categoryId\r\n            )\r\n          ]\r\n        );\r\n      }\r\n    }\r\n  }, [articleCategory, course, id]);\r\n\r\n  const handleUpdateCourse = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('title', title);\r\n      formData.append('description', description);\r\n      if (categoriesUpdate)\r\n        formData.append('categoryId', categoriesUpdate.id as unknown as string);\r\n      if (image[0]) {\r\n        formData.append('file', image[0]);\r\n      }\r\n\r\n      await updateCourse(formData, id);\r\n      successDispatch({\r\n        type: SUCCESS_ACTION.SET_SUCCESS,\r\n        success: 'Edit Course Success'\r\n      });\r\n      await mutate(COURSE_URL);\r\n      await mutate(COURSE_URL + id);\r\n      setIsOpenUpdateModal(false);\r\n    } catch (error) {\r\n      errorDispatch({\r\n        type: ERROR_ACTION.SET_ERROR,\r\n        error: error.response.data.message\r\n      });\r\n      setRequesting(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (files) => {\r\n    setImage(files);\r\n  };\r\n  const handleClose = () => {\r\n    setIsOpenUpdateModal(false);\r\n  };\r\n\r\n  if (!course) return <div></div>;\r\n  if (!articleCategory) return <div></div>;\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} fullWidth={true} maxWidth=\"xl\">\r\n      <DialogTitle>Update Course</DialogTitle>\r\n      <form className={classes.root} onSubmit={handleUpdateCourse}>\r\n        <DialogContent>\r\n          <Grid container>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                value={title}\r\n              />\r\n\r\n              <Box>\r\n                <QuillInput\r\n                  content={description}\r\n                  handleChangeContent={setDescription}\r\n                />\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl>\r\n                <Autocomplete\r\n                  disablePortal\r\n                  id=\"combo-box-demo\"\r\n                  options={categories}\r\n                  onChange={(event, value) => setCategoriesUpdate(value)}\r\n                  value={categoriesUpdate}\r\n                  getOptionLabel={(option: { name: string }) => option.name}\r\n                  renderInput={(params) => {\r\n                    return <TextField {...params} label=\"Category\" />;\r\n                  }}\r\n                />\r\n                <FormLabel>Thumb</FormLabel>\r\n                <DropzoneArea\r\n                  initialFiles={[imageUrl]}\r\n                  onChange={handleChange}\r\n                  acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\r\n                  maxFileSize={5000000}\r\n                  filesLimit={1}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            className={classes.label}\r\n            disabled={requesting}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditCourseForm;\r\n","import React from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst QuillInput = ({ content, handleChangeContent }) => {\r\n  const modules = {\r\n    toolbar: [\r\n      [{ font: [] }],\r\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n      ['bold', 'italic', 'underline', 'strike'],\r\n      [{ color: [] }, { background: [] }],\r\n      [{ script: 'sub' }, { script: 'super' }],\r\n      ['blockquote', 'code-block'],\r\n      [{ list: 'ordered' }, { list: 'bullet' }],\r\n      [{ indent: '-1' }, { indent: '+1' }, { align: [] }],\r\n      ['link', 'image', 'video'],\r\n      ['clean']\r\n    ]\r\n  };\r\n  return (\r\n    <ReactQuill\r\n      modules={modules}\r\n      theme=\"snow\"\r\n      value={content}\r\n      onChange={handleChangeContent}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(QuillInput);\r\n"],"names":["useStyles","makeStyles","theme","root","width","margin","spacing","height","btn","label","textTransform","open","id","setIsOpenUpdateModal","classes","useState","requesting","setRequesting","categories","setCategories","categoriesUpdate","setCategoriesUpdate","image","setImage","description","setDescription","title","setTitle","imageUrl","setImageUrl","appContext","useContext","AppContext","errorsReducer","successReducer","errorDispatch","successDispatch","course","useSWR","COURSE_URL","getData","data","articleCategory","ARTICLE_CATEGORY","useEffect","process","slice","length","results","findIndex","element","categoryId","handleUpdateCourse","event","preventDefault","formData","FormData","append","updateCourse","type","SUCCESS_ACTION","success","mutate","ERROR_ACTION","error","response","message","handleClose","onClose","fullWidth","maxWidth","className","onSubmit","container","item","xs","variant","name","onChange","e","target","value","content","handleChangeContent","disablePortal","options","getOptionLabel","option","renderInput","params","initialFiles","files","acceptedFiles","maxFileSize","filesLimit","color","size","disabled","onClick","QuillInput","modules","toolbar","font","header","background","script","list","indent","align","React"],"sourceRoot":""}