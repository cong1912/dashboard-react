{"version":3,"file":"static/js/9190.6f25b5b4.chunk.js","mappings":"mYAqBMA,GAAYC,EAAAA,EAAAA,IAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJ,yBAA0B,CACxBC,MAAO,MACPC,OAAQH,EAAMI,QAAQ,IAExB,2BAA4B,CAC1BC,OAAQ,KAEV,iBAAkB,CAChBH,MAAO,MACPC,OAAQH,EAAMI,QAAQ,IAExB,WAAY,CACVC,OAAQ,MAGZC,IAAK,CACHH,OAAQH,EAAMI,QAAQ,KAExBG,MAAO,CACLC,cAAe,OACfL,OAAQH,EAAMI,QAAQ,SAqG1B,UAjG2B,SAAC,GAAgD,IAA9CK,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,qBAAsBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,OACtDC,EAAUf,IAChB,GAA0BgB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAoCJ,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KAGMC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GACtBC,EAAkCH,EAAlCG,cAAeC,EAAmBJ,EAAnBI,eACvB,UAAgCD,EAAhC,GAAeE,GAAf,WACA,UAAmCD,EAAnC,GAAgBE,GAAhB,WAGcC,GAAcC,EAAAA,EAAAA,IAC1BlB,EAAKmB,EAAAA,GAAenB,EAAK,KACzBoB,EAAAA,GAFMC,MAKRC,EAAAA,EAAAA,YAAU,WACHtB,GAAOiB,IAGVZ,EAASY,EAAUb,OACnBG,EAAWU,EAAUX,YAEtB,CAACW,EAAWjB,IAEf,IAAMuB,EAAc,WAClBxB,GAAqB,IAEjByB,EAAkB,yCAAG,WACzBC,GADyB,mFAGzBA,EAAMC,iBAHmB,SAKjBL,EAAO,CACXjB,MAAOA,EACPE,QAASA,EACTL,QAASA,GARY,UAWjB0B,EAAAA,EAAAA,GAAeN,EAAMrB,GAXJ,cAYvBgB,EAAgB,CACdY,KAAMC,EAAAA,GAAAA,YACNC,QAAS,0BAdY,UAgBjBC,EAAAA,EAAAA,IAAOZ,EAAAA,GAAY,kBAAclB,IAhBhB,OAiBvBF,GAAqB,GAjBE,kDAmBvBgB,EAAc,CACZa,KAAMI,EAAAA,GAAAA,UACNC,MAAO,KAAMC,SAASb,KAAKc,UAE7B1B,GAAc,GAvBS,0DAAH,sDA2BxB,OACE,UAAC,IAAD,CAAQX,KAAMA,EAAMsC,QAASb,EAAac,SAAS,KAAnD,WACE,SAAC,IAAD,6BACA,kBAAMC,UAAWpC,EAAQZ,KAAMiD,SAAUf,EAAzC,WACE,UAAC,IAAD,YACE,SAAC,IAAD,CACEgB,QAAQ,WACR5C,MAAM,QACN6C,KAAK,QACLC,SAAU,SAACC,GACTtC,EAASsC,EAAEC,OAAOC,QAEpBA,MAAOzC,KAET,SAAC,IAAD,CACER,MAAM,UACNkD,WAAS,EACTC,KAAM,EACNN,KAAK,UACLI,MAAOvC,EACPoC,SAAU,SAACC,GAAD,OAAOpC,EAAWoC,EAAEC,OAAOC,cAGzC,UAAC,IAAD,YACE,SAAC,IAAD,CACEG,MAAM,UACNC,KAAK,QACLrB,KAAK,SACLU,UAAWpC,EAAQN,MACnBsD,SAAU1C,EALZ,qBASA,SAAC,IAAD,CAAQ2C,QAAS5B,EAAjB","sources":["components/EditQuestionForm/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { TextField, Theme, Button } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle\r\n} from '@material-ui/core';\r\nimport { QUESTION_URL } from 'src/constants/url';\r\nimport { getData } from 'src/helpers/apiHandle';\r\nimport useSWR, { mutate } from 'swr';\r\nimport { updateQuestion } from 'src/services/QuestionService';\r\n\r\n//context\r\nimport { ERROR_ACTION } from 'src/reduces/ErrorsReducer';\r\nimport { AppContext } from 'src/AppProvider';\r\nimport { AppContextType } from 'src/interfaces/AppContextType';\r\nimport { SUCCESS_ACTION } from 'src/reduces/SuccessReducer';\r\nimport { IQuestion } from 'src/content/applications/Questions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    '& .MuiFormControl-root': {\r\n      width: '90%',\r\n      margin: theme.spacing(1)\r\n    },\r\n    '& .MuiDialogContent-root': {\r\n      height: 250\r\n    },\r\n    '& .MuiBox-root': {\r\n      width: '90%',\r\n      margin: theme.spacing(1)\r\n    },\r\n    '& .quill': {\r\n      height: 180\r\n    }\r\n  },\r\n  btn: {\r\n    margin: theme.spacing(0.5)\r\n  },\r\n  label: {\r\n    textTransform: 'none',\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nconst CreateQuestionForm = ({ open, setIsOpenUpdateModal, id, newsId }) => {\r\n  const classes = useStyles();\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [requesting, setRequesting] = useState(false);\r\n\r\n  // context\r\n  const appContext = useContext(AppContext) as AppContextType;\r\n  const { errorsReducer, successReducer } = appContext;\r\n  const [errors, errorDispatch] = errorsReducer;\r\n  const [success, successDispatch] = successReducer;\r\n\r\n  // fetch data\r\n  const { data: questions } = useSWR<IQuestion>(\r\n    id ? QUESTION_URL + id : null,\r\n    getData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!id || !questions) {\r\n      return;\r\n    } else {\r\n      setTitle(questions.title);\r\n      setContent(questions.content);\r\n    }\r\n  }, [questions, id]);\r\n\r\n  const handleClose = () => {\r\n    setIsOpenUpdateModal(false);\r\n  };\r\n  const handleEditQuestion = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event.preventDefault();\r\n    try {\r\n      const data = {\r\n        title: title,\r\n        content: content,\r\n        newsId: +newsId\r\n      };\r\n\r\n      await updateQuestion(data, id);\r\n      successDispatch({\r\n        type: SUCCESS_ACTION.SET_SUCCESS,\r\n        success: 'Edit Question Success'\r\n      });\r\n      await mutate(QUESTION_URL + `?newsId=${newsId}`);\r\n      setIsOpenUpdateModal(false);\r\n    } catch (error) {\r\n      errorDispatch({\r\n        type: ERROR_ACTION.SET_ERROR,\r\n        error: error.response.data.message\r\n      });\r\n      setRequesting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth=\"sm\">\r\n      <DialogTitle>Edit Question</DialogTitle>\r\n      <form className={classes.root} onSubmit={handleEditQuestion}>\r\n        <DialogContent>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            label=\"Title\"\r\n            name=\"title\"\r\n            onChange={(e) => {\r\n              setTitle(e.target.value);\r\n            }}\r\n            value={title}\r\n          />\r\n          <TextField\r\n            label=\"Content\"\r\n            multiline\r\n            rows={5}\r\n            name=\"content\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            className={classes.label}\r\n            disabled={requesting}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateQuestionForm;\r\n"],"names":["useStyles","makeStyles","theme","root","width","margin","spacing","height","btn","label","textTransform","open","setIsOpenUpdateModal","id","newsId","classes","useState","title","setTitle","content","setContent","requesting","setRequesting","appContext","useContext","AppContext","errorsReducer","successReducer","errorDispatch","successDispatch","questions","useSWR","QUESTION_URL","getData","data","useEffect","handleClose","handleEditQuestion","event","preventDefault","updateQuestion","type","SUCCESS_ACTION","success","mutate","ERROR_ACTION","error","response","message","onClose","maxWidth","className","onSubmit","variant","name","onChange","e","target","value","multiline","rows","color","size","disabled","onClick"],"sourceRoot":""}